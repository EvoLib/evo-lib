import ast
from collections import defaultdict
from pathlib import Path


def extract_exportable_symbols(filepath: Path) -> list[str]:
    with open(filepath, "r") as f:
        tree = ast.parse(f.read())

    symbols = []

    for node in tree.body:
        if isinstance(node, (ast.FunctionDef, ast.ClassDef)):
            if not node.name.startswith("_"):
                symbols.append(node.name)
        elif isinstance(node, ast.Assign):
            for target in node.targets:
                if isinstance(target, ast.Name) and not target.id.startswith("_"):
                    symbols.append(target.id)
        elif isinstance(node, ast.AnnAssign):
            if isinstance(node.target, ast.Name) and not node.target.id.startswith("_"):
                symbols.append(node.target.id)

    return sorted(set(symbols))


def find_all_modules(base_dir: Path) -> list[tuple[str, Path]]:
    """Find all eligible .py modules in base_dir (excluding __init__.py and api.py)"""
    modules = []
    for path in base_dir.rglob("*.py"):
        if path.name in {"__init__.py", "api.py"}:
            continue
        if "__pycache__" in path.parts:
            continue
        rel_path = path.relative_to(base_dir)
        module_name = "evolib." + str(rel_path.with_suffix("")).replace("/", ".")
        modules.append((module_name, path))
    return modules


def write_api_file(modules: list[tuple[str, Path]], output_path: Path) -> list[str]:
    module_to_symbols = defaultdict(list)

    for mod_name, file_path in modules:
        symbols = extract_exportable_symbols(file_path)
        if symbols:
            module_to_symbols[mod_name].extend(symbols)

    with open(output_path, "w") as f:
        f.write("# Auto-generated by gen_api_module.py\n\n")
        for mod in sorted(module_to_symbols):
            syms = sorted(module_to_symbols[mod])
            f.write(f"from {mod} import {', '.join(syms)}\n")

        f.write("\n__all__ = [\n")
        for sym in sorted(sym for syms in module_to_symbols.values() for sym in syms):
            f.write(f'    "{sym}",\n')
        f.write("]\n")

    return sorted(sym for syms in module_to_symbols.values() for sym in syms)


def write_init_file(api_symbols: list[str], output_path: Path) -> None:
    with open(output_path, "w") as f:
        f.write("# Auto-generated from api.py by gen_api_module.py\n\n")
        f.write("from .api import " + ", ".join(api_symbols) + "\n\n")
        f.write("__all__ = [\n")
        for sym in api_symbols:
            f.write(f'    "{sym}",\n')
        f.write("]\n")


if __name__ == "__main__":
    import sys

    base_dir = Path(sys.argv[1]) if len(sys.argv) > 1 else Path("evolib")
    api_file = base_dir / "api.py"
    init_file = base_dir / "__init__.py"

    print("Scanning modules in", base_dir)
    modules = find_all_modules(base_dir)

    print(f"Found {len(modules)} modules")
    api_symbols = write_api_file(modules, api_file)

    print("Generating __init__.py ...")
    write_init_file(api_symbols, init_file)
    print("Done.")
