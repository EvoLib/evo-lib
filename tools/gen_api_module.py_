# AI generated
import ast
import sys
from collections import defaultdict
from pathlib import Path


def extract_all_from_init(init_file: Path) -> list[str]:
    with open(init_file, "r") as f:
        tree = ast.parse(f.read())
    for node in tree.body:
        if isinstance(node, ast.Assign):
            for target in node.targets:
                if isinstance(target, ast.Name) and target.id == "__all__":
                    return ast.literal_eval(node.value)
    return []


def relative_module_path(init_path: Path, base_package: str) -> str:
    parts = init_path.parent.parts
    idx = parts.index(base_package)
    return ".".join(parts[idx:])


def build_symbol_table(base_dir: Path, base_package: str = "evolib") -> dict[str, str]:
    """Returns symbol → module map without duplicates."""
    symbol_to_module = {}
    for init_file in base_dir.rglob("__init__.py"):
        if "__pycache__" in str(init_file):
            continue
        rel_module = relative_module_path(init_file, base_package)
        symbols = extract_all_from_init(init_file)
        for sym in symbols:
            if sym not in symbol_to_module:
                symbol_to_module[sym] = rel_module
    return symbol_to_module


def write_api_file(symbol_to_module: dict[str, str], output_path: Path) -> None:
    """Generates api.py with absolute imports."""
    module_to_symbols = defaultdict(list)
    for sym, mod in symbol_to_module.items():
        module_to_symbols[mod].append(sym)

    with open(output_path, "w") as f:
        f.write("# Auto-generated by gen_api_module.py\n\n")
        for mod in sorted(module_to_symbols):
            syms = sorted(module_to_symbols[mod])
            f.write(f"from {mod} import {', '.join(syms)}\n")

        f.write("\n__all__ = [\n")
        for sym in sorted(symbol_to_module):
            f.write(f'    "{sym}",\n')
        f.write("]\n")


def write_init_file(
    symbol_to_module: dict[str, str], output_path: Path, base_package: str
) -> None:
    """Generates evolib/__init__.py with relative imports."""
    module_to_symbols = defaultdict(list)
    for sym, mod in symbol_to_module.items():
        rel_mod = mod.removeprefix(base_package + ".")
        module_to_symbols[rel_mod].append(sym)

    with open(output_path, "w") as f:
        f.write("# Auto-generated from api.py by gen_api_module.py\n\n")
        for rel_mod in sorted(module_to_symbols):
            syms = sorted(module_to_symbols[rel_mod])
            f.write(f"from .{rel_mod} import {', '.join(syms)}\n")

        f.write("\n__all__ = [\n")
        for sym in sorted(symbol_to_module):
            f.write(f'    "{sym}",\n')
        f.write("]\n")


if __name__ == "__main__":
    base_dir = Path(sys.argv[1]) if len(sys.argv) > 1 else Path("evolib")
    api_file = base_dir / "api.py"
    init_file = base_dir / "__init__.py"
    base_package = "evolib"

    # Step 1: collect symbols
    symbol_to_module = build_symbol_table(base_dir, base_package)

    # Step 2: write api.py
    write_api_file(symbol_to_module, api_file)
    print(f"✅ api.py generated at: {api_file}")

    # Step 3: write __init__.py
    write_init_file(symbol_to_module, init_file, base_package)
    print(f"✅ __init__.py generated at: {init_file}")
