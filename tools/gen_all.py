# (AI generated)

import ast
import sys
from pathlib import Path


def extract_public_symbols(file_path: Path) -> list[str]:
    with open(file_path, "r") as f:
        tree = ast.parse(f.read())

    symbols = []

    for node in tree.body:
        # Explicit __all__ takes priority
        if isinstance(node, ast.Assign) and any(
            isinstance(t, ast.Name) and t.id == "__all__" for t in node.targets
        ):
            try:
                exports = ast.literal_eval(node.value)
                if isinstance(exports, list):
                    return exports
            except Exception:
                pass  # fallback to implicit method

        # Otherwise: export top-level functions and classes
        if isinstance(
            node, (ast.FunctionDef, ast.ClassDef)
        ) and not node.name.startswith("_"):
            symbols.append(node.name)

    return symbols


def generate_imports_and_all(
    source_dir: Path, base_module: str
) -> tuple[list[str], list[str]]:
    all_imports = []
    all_symbols = []

    for file in sorted(source_dir.glob("*.py")):
        if file.name == "__init__.py":
            continue

        module_name = file.stem
        symbols = extract_public_symbols(file)
        if symbols:
            import_line = (
                f"from {base_module}.{module_name} import {', '.join(symbols)}"
            )
            all_imports.append(import_line)
            all_symbols.extend(symbols)

    return all_imports, sorted(set(all_symbols))


def write_output(file_path: Path, imports: list[str], symbols: list[str]) -> None:
    with open(file_path, "w") as f:
        f.write("# Auto-generated by tools/gen_all.py\n\n")
        for line in imports:
            f.write(f"{line}\n")

        f.write("\n__all__ = [\n")
        for sym in symbols:
            f.write(f'    "{sym}",\n')
        f.write("]\n")


if __name__ == "__main__":
    source_path = Path(sys.argv[1])  # e.g. evolib/core
    target_path = Path(sys.argv[2])  # e.g. evolib/core/__init__.py
    base_module = sys.argv[3]  # e.g. evolib.core

    imports, symbols = generate_imports_and_all(source_path, base_module)
    write_output(target_path, imports, symbols)

    print(
        f"Written {len(imports)} import lines and {len(symbols)}"
        f"symbols to {target_path}"
    )
